dat.message <- dat[(mapsize+17) : length(dat)];
zi = which(dat.message == 0);
st = c(1,zi[-length(zi)]+1);
ed = zi-1;
vl = st<ed;
st = st[vl];
ed = ed[vl];
messages = sapply(1:length(st), function(x) intToUtf8(dat.message[st[x]:ed[x]]))
levels = matrix(as.numeric(dat.map), byrow=T, ncol=16);
levelindex= unlist(lapply(1:8, function(x) rep(x,16)));
levellist = lapply(1:8, function(x) levels[which(levelindex==x),]);
dat.info
idx=as.numeric(dat.info)-15
idx
idx= idx[idx>0]
idx
dat.message[idx:(idx+16)]
lapply(idx, function(x) dat.message[x:(x+16)])
lapply(idx, function(x) intToUtf8(dat.message[x:(x+16)]))
ed = zi-1;
ed
idx=as.numeric(dat.info)-15
idx = as.numeric(dat.info)-15;
idx
idx = idx[idx>0]
idx
ed = zi-1;
ed
sapply(st, function(x) ed[min(which(ed>x))])
ed
st
ed[min(which(ed>1))]
ed[min(which(ed>17))]
st
st = idx[idx>0];
st
sapply(st, function(x) ed[min(which(ed>x))])
dat.info <- dat[(mapsize+1) : (mapsize+16)];
dat.message <- dat[(mapsize+17) : length(dat)];
zi = which(dat.message == 0)-1;
idx = as.numeric(dat.info)-15;
st = idx[idx>0];
ed = sapply(st, function(x) ed[min(which(zi>x))]);
st
ed
messages = sapply(1:length(st), function(x) intToUtf8(dat.message[st[x]:ed[x]]))
messages
levels = matrix(as.numeric(dat.map), byrow=T, ncol=16);
levels
levels = matrix(as.numeric(dat.map), byrow=T, ncol=16);
levelindex= unlist(lapply(1:8, function(x) rep(x,16)));
levellist = lapply(1:8, function(x) levels[which(levelindex==x),]);
levellist
levellist
dungeonfile = 'D://GOG Galaxy//Games//Ultima 3//TIME.ULT'
#  dungeonfile = 'D://GOG Galaxy//Games//Ultima 3//PERINIAN.ULT'
dat<-readBin(dungeonfile,"raw",n=1000000);
mwidth =16;
mheight = 16;
mlevel = 8;
nmessages = 8;
mapsize = mwidth*mheight*mlevel;
dat.map <- dat[1:mapsize];
dat.info <- dat[(mapsize+1) : (mapsize+16)];
dat.message <- dat[(mapsize+17) : length(dat)];
zi = which(dat.message == 0)-1;
idx = as.numeric(dat.info)-15;
st = idx[idx>0];
ed = sapply(st, function(x) ed[min(which(zi>x))]);
messages = sapply(1:length(st), function(x) intToUtf8(dat.message[st[x]:ed[x]]))
levels = matrix(as.numeric(dat.map), byrow=T, ncol=16);
levelindex= unlist(lapply(1:8, function(x) rep(x,16)));
levellist = lapply(1:8, function(x) levels[which(levelindex==x),]);
levellist
messages
dat.info <- dat[(mapsize+1) : (mapsize+16)];
dat.info
idx = as.numeric(dat.info)-15;
idx
st = idx[idx>0];
st
zi = which(dat.message == 0)-1;.
zi
ed = sapply(st, function(x) ed[min(which(zi>x))]);
ed
st
zi
which(zi>st[1])
min(which(zi>st[1]))
ed = sapply(st, function(x) zi[min(which(zi>x))]);
ed
messages = sapply(1:length(st), function(x) intToUtf8(dat.message[st[x]:ed[x]]))
messages
levels = matrix(as.numeric(dat.map), byrow=T, ncol=16);
levelindex= unlist(lapply(1:8, function(x) rep(x,16)));
levellist = lapply(1:8, function(x) levels[which(levelindex==x),]);
levellist[[1]]
dungeonfile = 'D://GOG Galaxy//Games//Ultima 3//FIRE.ULT'
dat<-readBin(dungeonfile,"raw",n=1000000);
mwidth =16;
mheight = 16;
mlevel = 8;
nmessages = 8;
mapsize = mwidth*mheight*mlevel;
dat.map <- dat[1:mapsize];
dat.info <- dat[(mapsize+1) : (mapsize+16)];
dat.message <- dat[(mapsize+17) : length(dat)];
zi = which(dat.message == 0)-1;
idx = as.numeric(dat.info)-15;
st = idx[idx>0];
ed = sapply(st, function(x) zi[min(which(zi>x))]);
messages = sapply(1:length(st), function(x) intToUtf8(dat.message[st[x]:ed[x]]))
levels = matrix(as.numeric(dat.map), byrow=T, ncol=16);
levelindex= unlist(lapply(1:8, function(x) rep(x,16)));
levellist = lapply(1:8, function(x) levels[which(levelindex==x),]);
levellist
fountainfile = 'D://GOG Galaxy//Games//Ultima 3//FOUNDTAIN.ULT'
fountain.dat <-readBin(fountainfile,"raw",n=1000000);
fountainfile = 'D://GOG Galaxy//Games//Ultima 3//FOUNDTAIN'
fountain.dat <-readBin(fountainfile,"raw",n=1000000);
fountainfile = 'D://GOG Galaxy//Games//Ultima 3//FOUNDTAIN.IMG'
fountain.dat <-readBin(fountainfile,"raw",n=1000000);
fountainfile = 'D://GOG Galaxy//Games//Ultima 3//FOUNTAIN.IMG'
fountain.dat <-readBin(fountainfile,"raw",n=1000000);
fountain.dat
length(fountain)
length(fountain.dat)
matrix(fountain.dat, ncol=11, byrow=T)
dgdatfile = 'D://GOG Galaxy//Games//Ultima 3//DUNGEON.DAT'  # image   11x11 tile graphics
dgdat <-readBin(fountainfile,"raw",n=1000000);
dgdat
dgdatfile = 'D://GOG Galaxy//Games//Ultima 3//DUNGEON.DAT'  # image   11x11 tile graphics
dgdat <-readBin(dgdatfile ,"raw",n=1000000);
dgdat
size(dgdat)
length(dgdat)
1866 / 64
1866 / 16
1866 / 15
1866 / 14
1866 / 13
1866 / 12
1866 / 2
933 / 3
311 / 3
311 /6
311 /7
intToUtf8(dgdat)
dgdat
1866
1866/2
933/3
311/17
311/3
311/5
311/7
311/11
311/13
311/17
311/19
311 * 6
dgdatfile = 'D://GOG Galaxy//Games//Ultima 3//DUNGEON.DAT'  # image   11x11 tile graphics
namedatfile = 'D://GOG Galaxy//Games//Ultima 3//NAME.DAT'  # image   11x11 tile graphics
dgdat <-readBin(dgdatfile ,"raw",n=1000000);  # 1866 bytes
namedat <-readBin(namedatfile ,"raw",n=1000000);  # 1866 bytes
dgdat
namedat
intToUtf8(namedat)
intToUtf8(as.nuemric(namedat))
intToUtf8(as.numeric(namedat))
as.numeric(namedat)
split(namedat, seq(from=1, to=length(namedat), by=2))
seq(from=1, to=length(namedat), by=2)
namedat[seq(from=1, to=length(namedat), by=2)]
namex=namedat[seq(from=1, to=length(namedat), by=2)]
namey=namedat[seq(from=2, to=length(namedat), by=2)]
namex
namey
namex=as.numeric(namedat[seq(from=1, to=length(namedat), by=2)])
namex=as.numeric(namedat[seq(from=2, to=length(namedat), by=2)])
namex=as.numeric(namedat[seq(from=1, to=length(namedat), by=2)])
namey=as.numeric(namedat[seq(from=2, to=length(namedat), by=2)])
namex
namey
namedat
plot(namex, namey)
dg
dgdat
dgx=as.numeric(dg[seq(from=1, to=length(dg), by=2)])
dgy=as.numeric(dg[seq(from=2, to=length(dg), by=2)])
dgdat <-readBin(dgdatfile ,"raw",n=1000000);  # 1866 bytes
dgx=as.numeric(dgdat[seq(from=1, to=length(dgdat), by=2)])
dgy=as.numeric(dgdat[seq(from=2, to=length(dgdat), by=2)])
dgx
dgy
dgdat
matrix(as.numeric(dgdat, ncol=6, byrow=T)
)
matrix(as.numeric(dgdat, ncol=6, byrow=T))
matrix(as.numeric(dgdat), ncol=6, byrow=T)
movedatfile = 'D://GOG Galaxy//Games//Ultima 3//MOVES.DAT'  # image   11x11 tile graphics
movedat <-readBin(movedatfile ,"raw",n=1000000);  # 1866 bytes.
movedatfile = 'D://GOG Galaxy//Games//Ultima 3//MOVES.ULT'  # image   11x11 tile graphics
movedat <-readBin(movedatfile ,"raw",n=1000000);  # 1866 bytes
movedat
dat.message
as.numeric(dat.message)
dat.info
levellist
q()
A = sapply(1:10, function(x) c(x:(x+10)))
A
B = sample(c(T,F),11)
B = sample(c(T,F),11, replace=T)
B
set.seed(1);  B = sample(c(T,F),11, replace=T);
B
nobs = 100;
A = sapply(1:10, function(x) c(x:(x+(nobs-1))));   # 11 x 10 matrix
set.seed(1);  dir = sample(c(T,F),nobs, replace=T);
A
sapply(1:nobs,function(x) A[x,ifelse(dir[x],1:3, 8:10)])
vapply(1:nobs,function(x) A[x,ifelse(dir[x],1:3, 8:10)])
help(vapply)
Af = A[dir,1:3]; Bf = A[!dir, 8:10];
str(Af)
str(Bf)
Bf
Af
ww = order(dir);
ww
Af
C= rbind(Af,Bf)[ww];
C
Af
rbind(Af,Bf)
C= rbind(Af,Bf)[ww,];
str(C)
C
ww
C = matrix(nrow=nobs, ncol=3);
sr(C)
str(C)
C = matrix(0,nrow=nobs, ncol=3);
str(C)
C[dir,] = Af;
C[!dir,]=Bf;
head(C)
dir
nobs = 10;
A = sapply(1:10, function(x) c(x:(x+(nobs-1))));   # 11 x 10 matrix
set.seed(1);  dir = sample(c(T,F),nobs, replace=T);
#vapply(1:nobs,function(x) A[x,ifelse(dir[x],1:3, 8:10)])
Af = A[dir,1:3]; Bf = A[!dir, 8:10];
ww = order(dir);
C = matrix(0,nrow=nobs, ncol=3);
C[dir,] = Af;
C[!dir,]=Bf;
A
cbind(A,dir)
C
sosaria= readU3MapNPCDialog('Ultima 3//SOSARIA.ULT');
setwd("C:/Users/sojba/Google Drive/VisualStudioProject/Ultima3CharacterEditor/R")
sosaria= readU3MapNPCDialog('Ultima 3//SOSARIA.ULT');
library(EBImage);
loadTiles <- function(tilefile, numtiles, hres=16, vres=16, width=4) {
#tilefile = 'Shapes.tiff';
tileimage = readImage(tilefile); # 64 * 320 * 3
tiles <- lapply(1:numtiles,
function(ii) {
h= (ii-1)%%width;
v= (ii-1)%/%width;
imgmat= tileimage@.Data[(h*hres+1):(h*hres+hres),(v*vres+1):(v*vres+vres),];
Image(imgmat, dim=c(dim(imgmat)[1],dim(imgmat)[2],3), colormode='Color');
})
tiles;
}
convertUltima3MapToTiff<- function(mapfile, mapwidth=64, mapheight=64,divisor=4) {
remaining <- NA;
tifffile = gsub('.ULT','.tiff',basename(mapfile));
#  if (!file.exists(tifffile)) {
hres=16; vres=16; width = 4;
maplength=mapwidth*mapheight;
tiles <- loadTiles('Shapes.tiff',80, hres=hres, vres=vres, width=width);
numtiles = length(tiles);
dat<-readBin(mapfile,"raw",n=maplength*2);
mapdat = as.numeric(dat[1:maplength]);
remaining = dat[(maplength+1):length(dat)]
mat = array(mapdat%/%divisor, c(mapwidth,mapheight))+1;    # somehow, need to divide codes by 4 to get the correct tile number
rem = array(mapdat%%divisor, c(mapwidth,mapheight));    # somehow, need to divide codes by 4 to get the correct tile number
canvas = array(0, c(mapwidth*hres, mapheight*vres,3))
for (x in 1:maplength) {
h = (x-1) %% mapwidth + 1;
v = (x-1) %/% mapwidth + 1;
mm= mat[x];
canvas[((h-1)*hres+1):((h-1)*hres+hres),((v-1)*vres+1):((v-1)*vres+vres),] <- tiles[[mm]]@.Data;
}
im <- Image(canvas, dim=c(hres*mapwidth,vres*mapheight,3), colormode='Color');
writeImage(im, tifffile,bits.per.sample=8)
#  }
as.numeric(remaining);
}
readDialog<- function(dat) {
NextZero<-function(dat, position) {
while (dat[position]!=0) {
position = position+ 1;
}
position;
}
headerlength= dat[1];  jj =1;
dialog<-{};
for (k in 1:headerlength) {
if (dat[k] != 0) {
st = dat[k]+1;
ed = NextZero(dat, st);
dialog <- append(dialog, intToUtf8(dat[st:ed]));
}
}
dialog;
}
readNPC <- function(dat) {
npcshape = dat[385:416];
npcterrain = dat[417:448];
npcx = dat[449:480];
npcy = dat[481:512];
npcdialog= as.numeric(dat[513:544]) %% 16;
npctype = as.numeric(dat[513:544]) %/% 16;  # 0=stationary, 1=?, 2=?, 4=roaming, 8=merchant
npc = data.frame(shape=npcshape, terrain=npcterrain, x = npcx, y = npcy, dialog=npcdialog, type =npctype);
npc;
}
readU3MapNPCDialog<- function(mapfile) {
remaining <- NA;
maplength=64*64;a
dat<-readBin(mapfile,"raw",n=maplength*2);
mapdat = as.numeric(dat[1:maplength]);
remaining = as.numeric(dat[(maplength+1):length(dat)]);
NPC=readNPC(remaining);
dialog=readDialog(remaining);
list(NPC=NPC, dialog=dialog);
}
convertUltima3Conflict2Tiff<- function(mapfile) {
remaining = convertUltima3MapToTiff(mapfile, mapwidth=11, mapheight=11,divisor=1);
}
#mapfile = 'D://GOG Galaxy//Games//Ultima 3//BRITISH.ULT';
mapfile = 'D://GOG Galaxy//Games//Ultima 3//YEW.ULT';
mapwidth=64; mapheight=64;divisor=4;
remaining <- convertUltima3MapToTiff(mapfile);
paste(sapply(as.numeric(remaining),function(x) ifelse(x>=32 & x<=127, sprintf('%s   ',intToUtf8(x)), sprintf('%4d',x))),collapse='')
dat = as.numeric(remaining);
yew = readU3MapNPCDialog('Ultima 3//YEW.ULT');
moon =readU3MapNPCDialog('Ultima 3//MOON.ULT');
devil= readU3MapNPCDialog('Ultima 3//DEVIL.ULT');
sosaria= readU3MapNPCDialog('Ultima 3//SOSARIA.ULT');
#convertUltima3MapToTiff('D://GOG Galaxy//Games//Ultima 3//SOSARIA.ULT');
# convertUltima3MapToTiff('Ultima 3//YEW.ULT')
# convertUltima3MapToTiff('Ultima 3//AMBROSIA.ULT');
# convertUltima3MapToTiff('Ultima 3//BRITISH.ULT');
# convertUltima3MapToTiff('Ultima 3//DAWN.ULT');
# convertUltima3MapToTiff('Ultima 3//DEATH.ULT');
# convertUltima3MapToTiff('Ultima 3//DEVIL.ULT');
# convertUltima3MapToTiff('Ultima 3//EXODUS.ULT');
# convertUltima3MapToTiff('Ultima 3//FAWN.ULT');
# convertUltima3MapToTiff('Ultima 3//GREY.ULT');
# convertUltima3MapToTiff('Ultima 3//LCB.ULT');
# convertUltima3MapToTiff('Ultima 3//MONTOR_E.ULT');
# convertUltima3MapToTiff('Ultima 3//MONTOR_W.ULT');
# convertUltima3MapToTiff('Ultima 3//MOON.ULT')
#rem <- lapply(sprintf("Ultima 3//CNFLCT_%s.ULT",c('A','B','C','F','G','M','Q','R','S')),convertUltima3Conflict2Tiff);
#convertUltima3Conflict2Tiff("Ultima 3//TIME.ING")
library(EBImage);
loadTiles <- function(tilefile, numtiles, hres=16, vres=16, width=4) {
#tilefile = 'Shapes.tiff';
tileimage = readImage(tilefile); # 64 * 320 * 3
tiles <- lapply(1:numtiles,
function(ii) {
h= (ii-1)%%width;
v= (ii-1)%/%width;
imgmat= tileimage@.Data[(h*hres+1):(h*hres+hres),(v*vres+1):(v*vres+vres),];
Image(imgmat, dim=c(dim(imgmat)[1],dim(imgmat)[2],3), colormode='Color');
})
tiles;
}
convertUltima3MapToTiff<- function(mapfile, mapwidth=64, mapheight=64,divisor=4) {
remaining <- NA;
tifffile = gsub('.ULT','.tiff',basename(mapfile));
#  if (!file.exists(tifffile)) {
hres=16; vres=16; width = 4;
maplength=mapwidth*mapheight;
tiles <- loadTiles('Shapes.tiff',80, hres=hres, vres=vres, width=width);
numtiles = length(tiles);
dat<-readBin(mapfile,"raw",n=maplength*2);
mapdat = as.numeric(dat[1:maplength]);
remaining = dat[(maplength+1):length(dat)]
mat = array(mapdat%/%divisor, c(mapwidth,mapheight))+1;    # somehow, need to divide codes by 4 to get the correct tile number
rem = array(mapdat%%divisor, c(mapwidth,mapheight));    # somehow, need to divide codes by 4 to get the correct tile number
canvas = array(0, c(mapwidth*hres, mapheight*vres,3))
for (x in 1:maplength) {
h = (x-1) %% mapwidth + 1;
v = (x-1) %/% mapwidth + 1;
mm= mat[x];
canvas[((h-1)*hres+1):((h-1)*hres+hres),((v-1)*vres+1):((v-1)*vres+vres),] <- tiles[[mm]]@.Data;
}
im <- Image(canvas, dim=c(hres*mapwidth,vres*mapheight,3), colormode='Color');
writeImage(im, tifffile,bits.per.sample=8)
#  }
as.numeric(remaining);
}
readDialog<- function(dat) {
NextZero<-function(dat, position) {
while (dat[position]!=0) {
position = position+ 1;
}
position;
}
headerlength= dat[1];  jj =1;
dialog<-{};
for (k in 1:headerlength) {
if (dat[k] != 0) {
st = dat[k]+1;
ed = NextZero(dat, st);
dialog <- append(dialog, intToUtf8(dat[st:ed]));
}
}
dialog;
}
readNPC <- function(dat) {
npcshape = dat[385:416];
npcterrain = dat[417:448];
npcx = dat[449:480];
npcy = dat[481:512];
npcdialog= as.numeric(dat[513:544]) %% 16;
npctype = as.numeric(dat[513:544]) %/% 16;  # 0=stationary, 1=?, 2=?, 4=roaming, 8=merchant
npc = data.frame(shape=npcshape, terrain=npcterrain, x = npcx, y = npcy, dialog=npcdialog, type =npctype);
npc;
}
readU3MapNPCDialog<- function(mapfile) {
remaining <- NA;
maplength=64*64;
dat<-readBin(mapfile,"raw",n=maplength*2);
mapdat = as.numeric(dat[1:maplength]);
remaining = as.numeric(dat[(maplength+1):length(dat)]);
NPC=readNPC(remaining);
dialog=readDialog(remaining);
list(NPC=NPC, dialog=dialog);
}
convertUltima3Conflict2Tiff<- function(mapfile) {
remaining = convertUltima3MapToTiff(mapfile, mapwidth=11, mapheight=11,divisor=1);
}
#mapfile = 'D://GOG Galaxy//Games//Ultima 3//BRITISH.ULT';
mapfile = 'D://GOG Galaxy//Games//Ultima 3//YEW.ULT';
mapwidth=64; mapheight=64;divisor=4;
remaining <- convertUltima3MapToTiff(mapfile);
paste(sapply(as.numeric(remaining),function(x) ifelse(x>=32 & x<=127, sprintf('%s   ',intToUtf8(x)), sprintf('%4d',x))),collapse='')
dat = as.numeric(remaining);
yew = readU3MapNPCDialog('Ultima 3//YEW.ULT');
moon =readU3MapNPCDialog('Ultima 3//MOON.ULT');
devil= readU3MapNPCDialog('Ultima 3//DEVIL.ULT');
sosaria= readU3MapNPCDialog('Ultima 3//SOSARIA.ULT');
#convertUltima3MapToTiff('D://GOG Galaxy//Games//Ultima 3//SOSARIA.ULT');
# convertUltima3MapToTiff('Ultima 3//YEW.ULT')
# convertUltima3MapToTiff('Ultima 3//AMBROSIA.ULT');
# convertUltima3MapToTiff('Ultima 3//BRITISH.ULT');
# convertUltima3MapToTiff('Ultima 3//DAWN.ULT');
# convertUltima3MapToTiff('Ultima 3//DEATH.ULT');
# convertUltima3MapToTiff('Ultima 3//DEVIL.ULT');
# convertUltima3MapToTiff('Ultima 3//EXODUS.ULT');
# convertUltima3MapToTiff('Ultima 3//FAWN.ULT');
# convertUltima3MapToTiff('Ultima 3//GREY.ULT');
# convertUltima3MapToTiff('Ultima 3//LCB.ULT');
# convertUltima3MapToTiff('Ultima 3//MONTOR_E.ULT');
# convertUltima3MapToTiff('Ultima 3//MONTOR_W.ULT');
# convertUltima3MapToTiff('Ultima 3//MOON.ULT')
#rem <- lapply(sprintf("Ultima 3//CNFLCT_%s.ULT",c('A','B','C','F','G','M','Q','R','S')),convertUltima3Conflict2Tiff);
#convertUltima3Conflict2Tiff("Ultima 3//TIME.ING")
mapfile = 'Ultima 3//SOSARIA.ULT'
remaining <- NA;
maplength=64*64;
dat<-readBin(mapfile,"raw",n=maplength*2);
length(dat)
remaining
mapdat = as.numeric(dat[1:maplength]);
remaining = as.numeric(dat[(maplength+1):length(dat)]);
remaining
dat = remaining
192-128
NPC=readNPC(remaining);
NPC
104 /16
104 - 6*16
104 / 4
str(NPC)
convertUltima3MapToTiff('SOSARIA.ULT');
devil= readU3MapNPCDialog('Ultima 3//DEVIL.ULT');
devil
readNPC <- function(dat) {
npcshape = dat[385:416]/4;
npcterrain = dat[417:448]/4;
npcx = dat[449:480];
npcy = dat[481:512];
npcdialog= as.numeric(dat[513:544]) %% 16;
npctype = as.numeric(dat[513:544]) %/% 16;  # 0=stationary, 1=?, 2=?, 4=roaming, 8=following
npc = data.frame(shape=npcshape, terrain=npcterrain, x = npcx, y = npcy, dialog=npcdialog, type =npctype);
npc;
}
readNPC
yew = readU3MapNPCDialog('Ultima 3//YEW.ULT');
moon =readU3MapNPCDialog('Ultima 3//MOON.ULT');
devil= readU3MapNPCDialog('Ultima 3//DEVIL.ULT');
sosaria= readU3MapNPCDialog('Ultima 3//SOSARIA.ULT');
yew
moon
devil
